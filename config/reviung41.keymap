/*
 * Copyright (c) 2020 The ZMK Contributors
 *
 * SPDX-License-Identifier: MIT
 */

#include <behaviors.dtsi>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/rgb.h>
#include <dt-bindings/zmk/outputs.h>
#include <dt-bindings/zmk/ext_power.h>

/ {

//       conditional_layers {
//		compatible = "zmk,conditional-layers";
//		tri_layer {
//		    if-layers = <1 2>;
//		    then-layer = <3>;
//		};
//       }; 

	
        keymap {
                compatible = "zmk,keymap";

                default_layer {
// -------------------------------------------------------------------------------------
// |  TAB |  Q  |  W  |  E  |  R  |  T  |   |  Y  |  U   |  I  |  O  |  P  |   BKSP    |
// | CTRL |  A  |  S  |  D  |  F  |  G  |   |  H  |  J   |  K  |  L  |  ;  |    '      |
// | SHFT |  Z  |  X  |  C  |  V  |  B  |   |  N  |  M   |  ,  |  .  |  /  | SHFT(RET) |
//                         | ALT | LWR | SPC | RSE  | ALT |
                        bindings = <
   &kp TAB   &kp Q &kp W &kp E &kp R &kp T   &kp Y &kp U  &kp I     &kp O   &kp P    &kp BSPC
   &kp LCTRL &kp A &kp S &kp D &kp F &kp G   &kp H &kp J  &kp K     &kp L   &kp SEMI &kp SQT
   &kp LSHFT &kp Z &kp X &kp C &kp V &kp B   &kp N &kp M  &kp COMMA &kp DOT &kp FSLH &mt RSHFT RET
                        &mt LGUI ESC &lt 1 TAB &lt 3 SPACE &lt 2 BSPC &mt RALT RET
                        >;
                };

                lower_layer {
// ------------------------------------------------------------------------------------
// |    |  !  |  @  |  #  |  $  |  %  |   |  ^  |  &  |  *  |  (  |  )  |      DEL    |
// |    |  _  |  +  |  {  |  }  | "|" |   | LFT | DWN |  UP | RGT |  `  |       ~     |
// |    | ESC | GUI | ALT | CAPS|  "  |   | HOME| END | PGUP| PGDN| PRSC| SHFT(SPACE) |
//                       |     |     | RET | ADJ |     |
                        bindings = <
   &kp ESC   &kp EXCL   &kp AT      &kp HASH &kp DLLR &kp PRCNT      &kp CARET &kp AMPS  &kp ASTRK &kp LPAR &kp RPAR  &kp BSLH
   &trans    &kp GRAVE  &none       &none    &none    &none          &none     &kp MINUS &kp EQUAL &kp LBRC &kp RBRC  &kp PIPE
   &kp LSHFT &kp TILD   &kp LGUI    &kp LALT &kp CLCK &kp DQT        &none     &kp UNDER &kp PLUS  &kp LBKT &kp RBKT  &caps_word
                                 &trans      &trans       &kp RET        &mo 3       &trans
                        >;
                };

                raise_layer {
// ----------------------------------------------------------------------------
// |    |  1  |  2  |  3  |  4  |  5  |   |  6  |  7  |  8  |  9  |  0  | DEL |
// |    |  -  |  =  |  [  |  ]  |  \  |   | F1  | F2  | F3  | F4  | F5  | F6  |
// |    | ESC | GUI | ALT | CAPS|  "  |   | F7  | F8  | F9  | F10 | F11 | F12 |
//                       |     | ADJ | BKSP |    |     |
                        bindings = <
   &trans    &kp N1    &kp N2    &kp N3    &kp N4    &kp N5        &kp N6    &kp N7    &kp N8    &kp N9    &kp N0    &kp DEL
   &kp F1    &kp F2    &kp F3    &kp F4    &kp F5    &kp F6        &kp LEFT  &kp DOWN  &kp UP    &kp RIGHT &none     &none
   &kp F7    &kp F8    &kp F9    &kp F10   &kp F11   &kp F12       &kp RCTRL &kp RALT  &kp RGUI  &none     &none     &kp RSHFT
                                    &trans      &mo 3       &kp BSPC        &trans      &trans
                        >;
                };

                adjust_layer {
// -----------------------------------------------------------------------------------------
// | RGB BRI+ | RGB SAT+ | RGB HUE+ | RGB ANI+ |    | RGB TOG |   |  BT1  | BT2 | BT3 | BT4 | BT5 | BT CLR |
// | RGB BRI- | RGB SAT- | RGB HUE- | RGB ANI- |    |         |   |       |     |     |     |     |        |
// |          |          |          |          |    |         |   | RESET |     |     |     |     |        |
//                                              |     |     |     |     |     |
                        bindings = <
   &none           &kp LG(N1)      &kp LG(N2)      &kp LG(N3)      &kp LG(N4)      &kp LG(N5)         &kp LG(N6)   &kp LG(N7)   &kp LG(N8)   &kp LG(N9)   &kp LG(N0)    &bt BT_PRV 
   &rgb_ug RGB_TOG &rgb_ug RGB_BRI &rgb_ug RGB_SAI &rgb_ug RGB_HUI &rgb_ug RGB_EFF &ext_power EP_TOG  &kp LEFT     &kp DOWN     &kp UP       &kp RIGHT    &none         &bt BT_NXT
   &kp LSHFT       &rgb_ug RGB_BRD &rgb_ug RGB_SAD &rgb_ug RGB_HUD &rgb_ug RGB_EFR &out OUT_TOG       &sys_reset   &kp K_VOL_DN &kp K_VOL_UP &kp K_PP     &kp K_NEXT    &bt BT_CLR
                                                             &trans      &trans       &trans        &trans      &trans
                        >;
                };
        };
};
